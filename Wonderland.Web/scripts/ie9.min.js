/*! wonderland 2014-10-19 */
!function($) {
    function setValidationValues(options, ruleName, value) {
        options.rules[ruleName] = value, options.message && (options.messages[ruleName] = options.message);
    }
    function splitAndTrim(value) {
        return value.replace(/^\s+|\s+$/g, "").split(/\s*,\s*/g);
    }
    function escapeAttributeValue(value) {
        return value.replace(/([!"#$%&'()*+,./:;<=>?@\[\\\]^`{|}~])/g, "\\$1");
    }
    function getModelPrefix(fieldName) {
        return fieldName.substr(0, fieldName.lastIndexOf(".") + 1);
    }
    function appendModelPrefix(value, prefix) {
        return 0 === value.indexOf("*.") && (value = value.replace("*.", prefix)), value;
    }
    function onError(error, inputElement) {
        var container = $(this).find("[data-valmsg-for='" + escapeAttributeValue(inputElement[0].name) + "']"), replaceAttrValue = container.attr("data-valmsg-replace"), replace = replaceAttrValue ? $.parseJSON(replaceAttrValue) !== !1 : null;
        container.removeClass("field-validation-valid").addClass("field-validation-error"), 
        error.data("unobtrusiveContainer", container), replace ? (container.empty(), error.removeClass("input-validation-error").appendTo(container)) : error.hide();
    }
    function onErrors(event, validator) {
        var container = $(this).find("[data-valmsg-summary=true]"), list = container.find("ul");
        list && list.length && validator.errorList.length && (list.empty(), container.addClass("validation-summary-errors").removeClass("validation-summary-valid"), 
        $.each(validator.errorList, function() {
            $("<li />").html(this.message).appendTo(list);
        }));
    }
    function onSuccess(error) {
        var container = error.data("unobtrusiveContainer"), replaceAttrValue = container.attr("data-valmsg-replace"), replace = replaceAttrValue ? $.parseJSON(replaceAttrValue) : null;
        container && (container.addClass("field-validation-valid").removeClass("field-validation-error"), 
        error.removeData("unobtrusiveContainer"), replace && container.empty());
    }
    function onReset() {
        var $form = $(this);
        $form.data("validator").resetForm(), $form.find(".validation-summary-errors").addClass("validation-summary-valid").removeClass("validation-summary-errors"), 
        $form.find(".field-validation-error").addClass("field-validation-valid").removeClass("field-validation-error").removeData("unobtrusiveContainer").find(">*").removeData("unobtrusiveContainer");
    }
    function validationInfo(form) {
        var $form = $(form), result = $form.data(data_validation), onResetProxy = $.proxy(onReset, form);
        return result || (result = {
            options: {
                errorClass: "input-validation-error",
                errorElement: "span",
                errorPlacement: $.proxy(onError, form),
                invalidHandler: $.proxy(onErrors, form),
                messages: {},
                rules: {},
                success: $.proxy(onSuccess, form)
            },
            attachValidation: function() {
                $form.unbind("reset." + data_validation, onResetProxy).bind("reset." + data_validation, onResetProxy).validate(this.options);
            },
            validate: function() {
                return $form.validate(), $form.valid();
            }
        }, $form.data(data_validation, result)), result;
    }
    var adapters, $jQval = $.validator, data_validation = "unobtrusiveValidation";
    $jQval.unobtrusive = {
        adapters: [],
        parseElement: function(element, skipAttach) {
            var valInfo, rules, messages, $element = $(element), form = $element.parents("form")[0];
            form && (valInfo = validationInfo(form), valInfo.options.rules[element.name] = rules = {}, 
            valInfo.options.messages[element.name] = messages = {}, $.each(this.adapters, function() {
                var prefix = "data-val-" + this.name, message = $element.attr(prefix), paramValues = {};
                void 0 !== message && (prefix += "-", $.each(this.params, function() {
                    paramValues[this] = $element.attr(prefix + this);
                }), this.adapt({
                    element: element,
                    form: form,
                    message: message,
                    params: paramValues,
                    rules: rules,
                    messages: messages
                }));
            }), $.extend(rules, {
                __dummy__: !0
            }), skipAttach || valInfo.attachValidation());
        },
        parse: function(selector) {
            var $forms = $(selector).parents("form").andSelf().add($(selector).find("form")).filter("form");
            $(selector).find(":input[data-val=true]").each(function() {
                $jQval.unobtrusive.parseElement(this, !0);
            }), $forms.each(function() {
                var info = validationInfo(this);
                info && info.attachValidation();
            });
        }
    }, adapters = $jQval.unobtrusive.adapters, adapters.add = function(adapterName, params, fn) {
        return fn || (fn = params, params = []), this.push({
            name: adapterName,
            params: params,
            adapt: fn
        }), this;
    }, adapters.addBool = function(adapterName, ruleName) {
        return this.add(adapterName, function(options) {
            setValidationValues(options, ruleName || adapterName, !0);
        });
    }, adapters.addMinMax = function(adapterName, minRuleName, maxRuleName, minMaxRuleName, minAttribute, maxAttribute) {
        return this.add(adapterName, [ minAttribute || "min", maxAttribute || "max" ], function(options) {
            var min = options.params.min, max = options.params.max;
            min && max ? setValidationValues(options, minMaxRuleName, [ min, max ]) : min ? setValidationValues(options, minRuleName, min) : max && setValidationValues(options, maxRuleName, max);
        });
    }, adapters.addSingleVal = function(adapterName, attribute, ruleName) {
        return this.add(adapterName, [ attribute || "val" ], function(options) {
            setValidationValues(options, ruleName || adapterName, options.params[attribute]);
        });
    }, $jQval.addMethod("__dummy__", function() {
        return !0;
    }), $jQval.addMethod("regex", function(value, element, params) {
        var match;
        return this.optional(element) ? !0 : (match = new RegExp(params).exec(value), match && 0 === match.index && match[0].length === value.length);
    }), $jQval.addMethod("nonalphamin", function(value, element, nonalphamin) {
        var match;
        return nonalphamin && (match = value.match(/\W/g), match = match && match.length >= nonalphamin), 
        match;
    }), adapters.addSingleVal("accept", "exts").addSingleVal("regex", "pattern"), adapters.addBool("creditcard").addBool("date").addBool("digits").addBool("email").addBool("number").addBool("url"), 
    adapters.addMinMax("length", "minlength", "maxlength", "rangelength").addMinMax("range", "min", "max", "range"), 
    adapters.add("equalto", [ "other" ], function(options) {
        var prefix = getModelPrefix(options.element.name), other = options.params.other, fullOtherName = appendModelPrefix(other, prefix), element = $(options.form).find(":input[name='" + escapeAttributeValue(fullOtherName) + "']")[0];
        setValidationValues(options, "equalTo", element);
    }), adapters.add("required", function(options) {
        ("INPUT" !== options.element.tagName.toUpperCase() || "CHECKBOX" !== options.element.type.toUpperCase()) && setValidationValues(options, "required", !0);
    }), adapters.add("remote", [ "url", "type", "additionalfields" ], function(options) {
        var value = {
            url: options.params.url,
            type: options.params.type || "GET",
            data: {}
        }, prefix = getModelPrefix(options.element.name);
        $.each(splitAndTrim(options.params.additionalfields || options.element.name), function(i, fieldName) {
            var paramName = appendModelPrefix(fieldName, prefix);
            value.data[paramName] = function() {
                return $(options.form).find(":input[name='" + escapeAttributeValue(paramName) + "']").val();
            };
        }), setValidationValues(options, "remote", value);
    }), adapters.add("password", [ "min", "nonalphamin", "regex" ], function(options) {
        options.params.min && setValidationValues(options, "minlength", options.params.min), 
        options.params.nonalphamin && setValidationValues(options, "nonalphamin", options.params.nonalphamin), 
        options.params.regex && setValidationValues(options, "regex", options.params.regex);
    }), $(function() {
        $jQval.unobtrusive.parse(document);
    });
}(jQuery);